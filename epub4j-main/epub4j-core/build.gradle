/*
 * For more details on writing Custom Plugins, please refer to
 * https://docs.gradle.org/8.10.2/userguide/custom_plugins.html in the
 * Gradle documentation.
 */

plugins {
  id 'signing'
  id 'maven-publish'

  alias(libs.plugins.gversion)
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  implementation libs.kxml2
  implementation libs.xmlpull
  api libs.zip4j
}

gversion {
  // path is relative to the sub-project by default
  // Gradle variables can also be used
  // E.g. "${project.rootDir}/module/src/main/java"
  srcDir = "src/main/java/"
  classPackage = "io.documentnode.epub4j.util"
  // optional. If not specified GVersion is used
  className = "GVersion"
  // optional. This is the default
  dateFormat = "yyyy-MM-dd'T'HH:mm:ss z";
  // optional. UTC is default
  timeZone = "UTC"
  // optional. print out extra debug information
  debug = false
  // optional. Can be Java or Kotlin, case insensitive
  language = "java"
  // optional. Force types to be explicitly printed
  explicitType = false
}
project.compileJava.dependsOn(createVersionFile)

tasks.withType(Javadoc) {
  options.addBooleanOption('Xdoclint:none', true)
  options.addStringOption('sourcepath', '')
  options.addBooleanOption('html5', true)
}

java {
  withJavadocJar()
  withSourcesJar()
}

signing {
  sign publishing.publications
}

// Disable signing tasks in CI
tasks.withType(Sign).configureEach {
  onlyIf {
    // Skip signing if running in CI
    !System.getenv("CI")
  }
}

def ossrU = project.hasProperty("ossrhToken2") ? ossrhToken2 : ""
def ossrP = project.hasProperty("ossrhTokenPassword2") ? ossrhTokenPassword2 : ""

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      groupId = 'io.documentnode'
      artifactId = 'epub4j-core'
      version = project.version
      pom {
        name = 'epub4j'
        description = 'A java library for reading/writing/manipulating EPUB files, with improvements based on epublib.'
        url = 'https://documentnode.io/epub4j'
        packaging = 'jar'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'jiakuan'
            name = 'Jiakuan Wang'
            email = 'jake@documentnode.io'
            organization = 'Document Node'
            organizationUrl = 'https://documentnode.io'
          }
        }

        scm {
          connection = 'scm:git:git@github.com:documentnode/epub4j.git'
          developerConnection = 'scm:git:git@github.com:documentnode/epub4j.git'
          url = 'https://github.com/documentnode/epub4j'
        }
      }
    }
  }
  repositories {
    mavenLocal()
    maven {
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = ossrU
        password = ossrP
      }
    }
  }
}
