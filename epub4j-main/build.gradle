/**
 * Copyright (C) 2024 Document Node Pty Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  alias(libs.plugins.axion.release)
}

allprojects {
  group = 'io.documentnode'
  project.version = rootProject.version
}

subprojects {
  // Apply the java-library plugin for API and implementation separation.
  apply plugin: "java-library"
  apply plugin: "java"

  repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
  }

  def javaVersion = JavaVersion.VERSION_17
  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(javaVersion.toString())
    }
  }
  task enforceVersion {
    doLast {
      def foundVersion = JavaVersion.current()
      if (foundVersion != javaVersion)
        throw new IllegalStateException("Wrong Java version; required is "
            + javaVersion + ", but found " + foundVersion)
    }
  }
  compileJava.dependsOn(enforceVersion)

  dependencies {
    implementation libs.dn.minilog

    // Don't use the traditional logging framework to make it easier
    // for creating a native shared library (smaller)
    // implementation("org.slf4j:slf4j-api:1.8.0-beta4")
    // implementation("org.slf4j:slf4j-simple:1.8.0-beta4")

    // Use JUnit for testing
    testImplementation libs.junit4
    testImplementation libs.mockito.core
  }

  tasks.named('test') {
    // Use JUnit for unit tests.
    useJUnit()
  }
}
